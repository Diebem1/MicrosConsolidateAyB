//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceTramasMicros.Model.WSLogMicros {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EnviarLog.Trama", Namespace="http://schemas.datacontract.org/2004/07/ServicioMicros")]
    [System.SerializableAttribute()]
    public partial class EnviarLogTrama : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ltsDiscountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ltsImpuestosField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ltsMenuField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ltsPaymentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ltsServicesChargesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ltsTenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nombreArchivoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ltsDiscount {
            get {
                return this.ltsDiscountField;
            }
            set {
                if ((object.ReferenceEquals(this.ltsDiscountField, value) != true)) {
                    this.ltsDiscountField = value;
                    this.RaisePropertyChanged("ltsDiscount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ltsImpuestos {
            get {
                return this.ltsImpuestosField;
            }
            set {
                if ((object.ReferenceEquals(this.ltsImpuestosField, value) != true)) {
                    this.ltsImpuestosField = value;
                    this.RaisePropertyChanged("ltsImpuestos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ltsMenu {
            get {
                return this.ltsMenuField;
            }
            set {
                if ((object.ReferenceEquals(this.ltsMenuField, value) != true)) {
                    this.ltsMenuField = value;
                    this.RaisePropertyChanged("ltsMenu");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ltsPayment {
            get {
                return this.ltsPaymentField;
            }
            set {
                if ((object.ReferenceEquals(this.ltsPaymentField, value) != true)) {
                    this.ltsPaymentField = value;
                    this.RaisePropertyChanged("ltsPayment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ltsServicesCharges {
            get {
                return this.ltsServicesChargesField;
            }
            set {
                if ((object.ReferenceEquals(this.ltsServicesChargesField, value) != true)) {
                    this.ltsServicesChargesField = value;
                    this.RaisePropertyChanged("ltsServicesCharges");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ltsTender {
            get {
                return this.ltsTenderField;
            }
            set {
                if ((object.ReferenceEquals(this.ltsTenderField, value) != true)) {
                    this.ltsTenderField = value;
                    this.RaisePropertyChanged("ltsTender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nombreArchivo {
            get {
                return this.nombreArchivoField;
            }
            set {
                if ((object.ReferenceEquals(this.nombreArchivoField, value) != true)) {
                    this.nombreArchivoField = value;
                    this.RaisePropertyChanged("nombreArchivo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceMicros")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WSLogMicros.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.IAsyncResult BeginGetData(int value, System.AsyncCallback callback, object asyncState);
        
        string EndGetData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertarLog", ReplyAction="http://tempuri.org/IService1/InsertarLogResponse")]
        void InsertarLog(string claveFacto, string centroConsumo, string nombreFile, string errorTry, string error, System.DateTime recordDate, string referencia_CI_CC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/InsertarLog", ReplyAction="http://tempuri.org/IService1/InsertarLogResponse")]
        System.IAsyncResult BeginInsertarLog(string claveFacto, string centroConsumo, string nombreFile, string errorTry, string error, System.DateTime recordDate, string referencia_CI_CC, System.AsyncCallback callback, object asyncState);
        
        void EndInsertarLog(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertaLogTrama", ReplyAction="http://tempuri.org/IService1/InsertaLogTramaResponse")]
        void InsertaLogTrama(string claveFacto, string centroConsumo, string nombreFile, string errorTry, string error, System.DateTime recordDate, string referencia_CI_CC, string tranaTxt, string tramXml, ServiceTramasMicros.Model.WSLogMicros.EnviarLogTrama layout);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/InsertaLogTrama", ReplyAction="http://tempuri.org/IService1/InsertaLogTramaResponse")]
        System.IAsyncResult BeginInsertaLogTrama(string claveFacto, string centroConsumo, string nombreFile, string errorTry, string error, System.DateTime recordDate, string referencia_CI_CC, string tranaTxt, string tramXml, ServiceTramasMicros.Model.WSLogMicros.EnviarLogTrama layout, System.AsyncCallback callback, object asyncState);
        
        void EndInsertaLogTrama(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertarTrama", ReplyAction="http://tempuri.org/IService1/InsertarTramaResponse")]
        void InsertarTrama(string claveFacto, string centroConsumo, string nombreFile, ServiceTramasMicros.Model.WSLogMicros.EnviarLogTrama trama, System.DateTime recordDate, string referencia_CI_CC, string tramaXML);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/InsertarTrama", ReplyAction="http://tempuri.org/IService1/InsertarTramaResponse")]
        System.IAsyncResult BeginInsertarTrama(string claveFacto, string centroConsumo, string nombreFile, ServiceTramasMicros.Model.WSLogMicros.EnviarLogTrama trama, System.DateTime recordDate, string referencia_CI_CC, string tramaXML, System.AsyncCallback callback, object asyncState);
        
        void EndInsertarTrama(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertaLogPuerto", ReplyAction="http://tempuri.org/IService1/InsertaLogPuertoResponse")]
        void InsertaLogPuerto(string claveFacto, string centroConsumo, string error);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/InsertaLogPuerto", ReplyAction="http://tempuri.org/IService1/InsertaLogPuertoResponse")]
        System.IAsyncResult BeginInsertaLogPuerto(string claveFacto, string centroConsumo, string error, System.AsyncCallback callback, object asyncState);
        
        void EndInsertaLogPuerto(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertaPing", ReplyAction="http://tempuri.org/IService1/InsertaPingResponse")]
        void InsertaPing(string clave);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/InsertaPing", ReplyAction="http://tempuri.org/IService1/InsertaPingResponse")]
        System.IAsyncResult BeginInsertaPing(string clave, System.AsyncCallback callback, object asyncState);
        
        void EndInsertaPing(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        ServiceTramasMicros.Model.WSLogMicros.CompositeType GetDataUsingDataContract(ServiceTramasMicros.Model.WSLogMicros.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.IAsyncResult BeginGetDataUsingDataContract(ServiceTramasMicros.Model.WSLogMicros.CompositeType composite, System.AsyncCallback callback, object asyncState);
        
        ServiceTramasMicros.Model.WSLogMicros.CompositeType EndGetDataUsingDataContract(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ServiceTramasMicros.Model.WSLogMicros.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataUsingDataContractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataUsingDataContractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ServiceTramasMicros.Model.WSLogMicros.CompositeType Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ServiceTramasMicros.Model.WSLogMicros.CompositeType)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ServiceTramasMicros.Model.WSLogMicros.IService1>, ServiceTramasMicros.Model.WSLogMicros.IService1 {
        
        private BeginOperationDelegate onBeginGetDataDelegate;
        
        private EndOperationDelegate onEndGetDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertarLogDelegate;
        
        private EndOperationDelegate onEndInsertarLogDelegate;
        
        private System.Threading.SendOrPostCallback onInsertarLogCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertaLogTramaDelegate;
        
        private EndOperationDelegate onEndInsertaLogTramaDelegate;
        
        private System.Threading.SendOrPostCallback onInsertaLogTramaCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertarTramaDelegate;
        
        private EndOperationDelegate onEndInsertarTramaDelegate;
        
        private System.Threading.SendOrPostCallback onInsertarTramaCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertaLogPuertoDelegate;
        
        private EndOperationDelegate onEndInsertaLogPuertoDelegate;
        
        private System.Threading.SendOrPostCallback onInsertaLogPuertoCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertaPingDelegate;
        
        private EndOperationDelegate onEndInsertaPingDelegate;
        
        private System.Threading.SendOrPostCallback onInsertaPingCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDataUsingDataContractDelegate;
        
        private EndOperationDelegate onEndGetDataUsingDataContractDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataUsingDataContractCompletedDelegate;
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetDataCompletedEventArgs> GetDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> InsertarLogCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> InsertaLogTramaCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> InsertarTramaCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> InsertaLogPuertoCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> InsertaPingCompleted;
        
        public event System.EventHandler<GetDataUsingDataContractCompletedEventArgs> GetDataUsingDataContractCompleted;
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetData(int value, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetData(value, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetData(System.IAsyncResult result) {
            return base.Channel.EndGetData(result);
        }
        
        private System.IAsyncResult OnBeginGetData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int value = ((int)(inValues[0]));
            return this.BeginGetData(value, callback, asyncState);
        }
        
        private object[] OnEndGetData(System.IAsyncResult result) {
            string retVal = this.EndGetData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataCompleted(object state) {
            if ((this.GetDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataCompleted(this, new GetDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataAsync(int value) {
            this.GetDataAsync(value, null);
        }
        
        public void GetDataAsync(int value, object userState) {
            if ((this.onBeginGetDataDelegate == null)) {
                this.onBeginGetDataDelegate = new BeginOperationDelegate(this.OnBeginGetData);
            }
            if ((this.onEndGetDataDelegate == null)) {
                this.onEndGetDataDelegate = new EndOperationDelegate(this.OnEndGetData);
            }
            if ((this.onGetDataCompletedDelegate == null)) {
                this.onGetDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataDelegate, new object[] {
                        value}, this.onEndGetDataDelegate, this.onGetDataCompletedDelegate, userState);
        }
        
        public void InsertarLog(string claveFacto, string centroConsumo, string nombreFile, string errorTry, string error, System.DateTime recordDate, string referencia_CI_CC) {
            base.Channel.InsertarLog(claveFacto, centroConsumo, nombreFile, errorTry, error, recordDate, referencia_CI_CC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertarLog(string claveFacto, string centroConsumo, string nombreFile, string errorTry, string error, System.DateTime recordDate, string referencia_CI_CC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertarLog(claveFacto, centroConsumo, nombreFile, errorTry, error, recordDate, referencia_CI_CC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndInsertarLog(System.IAsyncResult result) {
            base.Channel.EndInsertarLog(result);
        }
        
        private System.IAsyncResult OnBeginInsertarLog(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string claveFacto = ((string)(inValues[0]));
            string centroConsumo = ((string)(inValues[1]));
            string nombreFile = ((string)(inValues[2]));
            string errorTry = ((string)(inValues[3]));
            string error = ((string)(inValues[4]));
            System.DateTime recordDate = ((System.DateTime)(inValues[5]));
            string referencia_CI_CC = ((string)(inValues[6]));
            return this.BeginInsertarLog(claveFacto, centroConsumo, nombreFile, errorTry, error, recordDate, referencia_CI_CC, callback, asyncState);
        }
        
        private object[] OnEndInsertarLog(System.IAsyncResult result) {
            this.EndInsertarLog(result);
            return null;
        }
        
        private void OnInsertarLogCompleted(object state) {
            if ((this.InsertarLogCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertarLogCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertarLogAsync(string claveFacto, string centroConsumo, string nombreFile, string errorTry, string error, System.DateTime recordDate, string referencia_CI_CC) {
            this.InsertarLogAsync(claveFacto, centroConsumo, nombreFile, errorTry, error, recordDate, referencia_CI_CC, null);
        }
        
        public void InsertarLogAsync(string claveFacto, string centroConsumo, string nombreFile, string errorTry, string error, System.DateTime recordDate, string referencia_CI_CC, object userState) {
            if ((this.onBeginInsertarLogDelegate == null)) {
                this.onBeginInsertarLogDelegate = new BeginOperationDelegate(this.OnBeginInsertarLog);
            }
            if ((this.onEndInsertarLogDelegate == null)) {
                this.onEndInsertarLogDelegate = new EndOperationDelegate(this.OnEndInsertarLog);
            }
            if ((this.onInsertarLogCompletedDelegate == null)) {
                this.onInsertarLogCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertarLogCompleted);
            }
            base.InvokeAsync(this.onBeginInsertarLogDelegate, new object[] {
                        claveFacto,
                        centroConsumo,
                        nombreFile,
                        errorTry,
                        error,
                        recordDate,
                        referencia_CI_CC}, this.onEndInsertarLogDelegate, this.onInsertarLogCompletedDelegate, userState);
        }
        
        public void InsertaLogTrama(string claveFacto, string centroConsumo, string nombreFile, string errorTry, string error, System.DateTime recordDate, string referencia_CI_CC, string tranaTxt, string tramXml, ServiceTramasMicros.Model.WSLogMicros.EnviarLogTrama layout) {
            base.Channel.InsertaLogTrama(claveFacto, centroConsumo, nombreFile, errorTry, error, recordDate, referencia_CI_CC, tranaTxt, tramXml, layout);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertaLogTrama(string claveFacto, string centroConsumo, string nombreFile, string errorTry, string error, System.DateTime recordDate, string referencia_CI_CC, string tranaTxt, string tramXml, ServiceTramasMicros.Model.WSLogMicros.EnviarLogTrama layout, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertaLogTrama(claveFacto, centroConsumo, nombreFile, errorTry, error, recordDate, referencia_CI_CC, tranaTxt, tramXml, layout, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndInsertaLogTrama(System.IAsyncResult result) {
            base.Channel.EndInsertaLogTrama(result);
        }
        
        private System.IAsyncResult OnBeginInsertaLogTrama(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string claveFacto = ((string)(inValues[0]));
            string centroConsumo = ((string)(inValues[1]));
            string nombreFile = ((string)(inValues[2]));
            string errorTry = ((string)(inValues[3]));
            string error = ((string)(inValues[4]));
            System.DateTime recordDate = ((System.DateTime)(inValues[5]));
            string referencia_CI_CC = ((string)(inValues[6]));
            string tranaTxt = ((string)(inValues[7]));
            string tramXml = ((string)(inValues[8]));
            ServiceTramasMicros.Model.WSLogMicros.EnviarLogTrama layout = ((ServiceTramasMicros.Model.WSLogMicros.EnviarLogTrama)(inValues[9]));
            return this.BeginInsertaLogTrama(claveFacto, centroConsumo, nombreFile, errorTry, error, recordDate, referencia_CI_CC, tranaTxt, tramXml, layout, callback, asyncState);
        }
        
        private object[] OnEndInsertaLogTrama(System.IAsyncResult result) {
            this.EndInsertaLogTrama(result);
            return null;
        }
        
        private void OnInsertaLogTramaCompleted(object state) {
            if ((this.InsertaLogTramaCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertaLogTramaCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertaLogTramaAsync(string claveFacto, string centroConsumo, string nombreFile, string errorTry, string error, System.DateTime recordDate, string referencia_CI_CC, string tranaTxt, string tramXml, ServiceTramasMicros.Model.WSLogMicros.EnviarLogTrama layout) {
            this.InsertaLogTramaAsync(claveFacto, centroConsumo, nombreFile, errorTry, error, recordDate, referencia_CI_CC, tranaTxt, tramXml, layout, null);
        }
        
        public void InsertaLogTramaAsync(string claveFacto, string centroConsumo, string nombreFile, string errorTry, string error, System.DateTime recordDate, string referencia_CI_CC, string tranaTxt, string tramXml, ServiceTramasMicros.Model.WSLogMicros.EnviarLogTrama layout, object userState) {
            if ((this.onBeginInsertaLogTramaDelegate == null)) {
                this.onBeginInsertaLogTramaDelegate = new BeginOperationDelegate(this.OnBeginInsertaLogTrama);
            }
            if ((this.onEndInsertaLogTramaDelegate == null)) {
                this.onEndInsertaLogTramaDelegate = new EndOperationDelegate(this.OnEndInsertaLogTrama);
            }
            if ((this.onInsertaLogTramaCompletedDelegate == null)) {
                this.onInsertaLogTramaCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertaLogTramaCompleted);
            }
            base.InvokeAsync(this.onBeginInsertaLogTramaDelegate, new object[] {
                        claveFacto,
                        centroConsumo,
                        nombreFile,
                        errorTry,
                        error,
                        recordDate,
                        referencia_CI_CC,
                        tranaTxt,
                        tramXml,
                        layout}, this.onEndInsertaLogTramaDelegate, this.onInsertaLogTramaCompletedDelegate, userState);
        }
        
        public void InsertarTrama(string claveFacto, string centroConsumo, string nombreFile, ServiceTramasMicros.Model.WSLogMicros.EnviarLogTrama trama, System.DateTime recordDate, string referencia_CI_CC, string tramaXML) {
            base.Channel.InsertarTrama(claveFacto, centroConsumo, nombreFile, trama, recordDate, referencia_CI_CC, tramaXML);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertarTrama(string claveFacto, string centroConsumo, string nombreFile, ServiceTramasMicros.Model.WSLogMicros.EnviarLogTrama trama, System.DateTime recordDate, string referencia_CI_CC, string tramaXML, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertarTrama(claveFacto, centroConsumo, nombreFile, trama, recordDate, referencia_CI_CC, tramaXML, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndInsertarTrama(System.IAsyncResult result) {
            base.Channel.EndInsertarTrama(result);
        }
        
        private System.IAsyncResult OnBeginInsertarTrama(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string claveFacto = ((string)(inValues[0]));
            string centroConsumo = ((string)(inValues[1]));
            string nombreFile = ((string)(inValues[2]));
            ServiceTramasMicros.Model.WSLogMicros.EnviarLogTrama trama = ((ServiceTramasMicros.Model.WSLogMicros.EnviarLogTrama)(inValues[3]));
            System.DateTime recordDate = ((System.DateTime)(inValues[4]));
            string referencia_CI_CC = ((string)(inValues[5]));
            string tramaXML = ((string)(inValues[6]));
            return this.BeginInsertarTrama(claveFacto, centroConsumo, nombreFile, trama, recordDate, referencia_CI_CC, tramaXML, callback, asyncState);
        }
        
        private object[] OnEndInsertarTrama(System.IAsyncResult result) {
            this.EndInsertarTrama(result);
            return null;
        }
        
        private void OnInsertarTramaCompleted(object state) {
            if ((this.InsertarTramaCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertarTramaCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertarTramaAsync(string claveFacto, string centroConsumo, string nombreFile, ServiceTramasMicros.Model.WSLogMicros.EnviarLogTrama trama, System.DateTime recordDate, string referencia_CI_CC, string tramaXML) {
            this.InsertarTramaAsync(claveFacto, centroConsumo, nombreFile, trama, recordDate, referencia_CI_CC, tramaXML, null);
        }
        
        public void InsertarTramaAsync(string claveFacto, string centroConsumo, string nombreFile, ServiceTramasMicros.Model.WSLogMicros.EnviarLogTrama trama, System.DateTime recordDate, string referencia_CI_CC, string tramaXML, object userState) {
            if ((this.onBeginInsertarTramaDelegate == null)) {
                this.onBeginInsertarTramaDelegate = new BeginOperationDelegate(this.OnBeginInsertarTrama);
            }
            if ((this.onEndInsertarTramaDelegate == null)) {
                this.onEndInsertarTramaDelegate = new EndOperationDelegate(this.OnEndInsertarTrama);
            }
            if ((this.onInsertarTramaCompletedDelegate == null)) {
                this.onInsertarTramaCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertarTramaCompleted);
            }
            base.InvokeAsync(this.onBeginInsertarTramaDelegate, new object[] {
                        claveFacto,
                        centroConsumo,
                        nombreFile,
                        trama,
                        recordDate,
                        referencia_CI_CC,
                        tramaXML}, this.onEndInsertarTramaDelegate, this.onInsertarTramaCompletedDelegate, userState);
        }
        
        public void InsertaLogPuerto(string claveFacto, string centroConsumo, string error) {
            base.Channel.InsertaLogPuerto(claveFacto, centroConsumo, error);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertaLogPuerto(string claveFacto, string centroConsumo, string error, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertaLogPuerto(claveFacto, centroConsumo, error, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndInsertaLogPuerto(System.IAsyncResult result) {
            base.Channel.EndInsertaLogPuerto(result);
        }
        
        private System.IAsyncResult OnBeginInsertaLogPuerto(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string claveFacto = ((string)(inValues[0]));
            string centroConsumo = ((string)(inValues[1]));
            string error = ((string)(inValues[2]));
            return this.BeginInsertaLogPuerto(claveFacto, centroConsumo, error, callback, asyncState);
        }
        
        private object[] OnEndInsertaLogPuerto(System.IAsyncResult result) {
            this.EndInsertaLogPuerto(result);
            return null;
        }
        
        private void OnInsertaLogPuertoCompleted(object state) {
            if ((this.InsertaLogPuertoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertaLogPuertoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertaLogPuertoAsync(string claveFacto, string centroConsumo, string error) {
            this.InsertaLogPuertoAsync(claveFacto, centroConsumo, error, null);
        }
        
        public void InsertaLogPuertoAsync(string claveFacto, string centroConsumo, string error, object userState) {
            if ((this.onBeginInsertaLogPuertoDelegate == null)) {
                this.onBeginInsertaLogPuertoDelegate = new BeginOperationDelegate(this.OnBeginInsertaLogPuerto);
            }
            if ((this.onEndInsertaLogPuertoDelegate == null)) {
                this.onEndInsertaLogPuertoDelegate = new EndOperationDelegate(this.OnEndInsertaLogPuerto);
            }
            if ((this.onInsertaLogPuertoCompletedDelegate == null)) {
                this.onInsertaLogPuertoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertaLogPuertoCompleted);
            }
            base.InvokeAsync(this.onBeginInsertaLogPuertoDelegate, new object[] {
                        claveFacto,
                        centroConsumo,
                        error}, this.onEndInsertaLogPuertoDelegate, this.onInsertaLogPuertoCompletedDelegate, userState);
        }
        
        public void InsertaPing(string clave) {
            base.Channel.InsertaPing(clave);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertaPing(string clave, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertaPing(clave, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndInsertaPing(System.IAsyncResult result) {
            base.Channel.EndInsertaPing(result);
        }
        
        private System.IAsyncResult OnBeginInsertaPing(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string clave = ((string)(inValues[0]));
            return this.BeginInsertaPing(clave, callback, asyncState);
        }
        
        private object[] OnEndInsertaPing(System.IAsyncResult result) {
            this.EndInsertaPing(result);
            return null;
        }
        
        private void OnInsertaPingCompleted(object state) {
            if ((this.InsertaPingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertaPingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertaPingAsync(string clave) {
            this.InsertaPingAsync(clave, null);
        }
        
        public void InsertaPingAsync(string clave, object userState) {
            if ((this.onBeginInsertaPingDelegate == null)) {
                this.onBeginInsertaPingDelegate = new BeginOperationDelegate(this.OnBeginInsertaPing);
            }
            if ((this.onEndInsertaPingDelegate == null)) {
                this.onEndInsertaPingDelegate = new EndOperationDelegate(this.OnEndInsertaPing);
            }
            if ((this.onInsertaPingCompletedDelegate == null)) {
                this.onInsertaPingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertaPingCompleted);
            }
            base.InvokeAsync(this.onBeginInsertaPingDelegate, new object[] {
                        clave}, this.onEndInsertaPingDelegate, this.onInsertaPingCompletedDelegate, userState);
        }
        
        public ServiceTramasMicros.Model.WSLogMicros.CompositeType GetDataUsingDataContract(ServiceTramasMicros.Model.WSLogMicros.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDataUsingDataContract(ServiceTramasMicros.Model.WSLogMicros.CompositeType composite, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDataUsingDataContract(composite, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ServiceTramasMicros.Model.WSLogMicros.CompositeType EndGetDataUsingDataContract(System.IAsyncResult result) {
            return base.Channel.EndGetDataUsingDataContract(result);
        }
        
        private System.IAsyncResult OnBeginGetDataUsingDataContract(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ServiceTramasMicros.Model.WSLogMicros.CompositeType composite = ((ServiceTramasMicros.Model.WSLogMicros.CompositeType)(inValues[0]));
            return this.BeginGetDataUsingDataContract(composite, callback, asyncState);
        }
        
        private object[] OnEndGetDataUsingDataContract(System.IAsyncResult result) {
            ServiceTramasMicros.Model.WSLogMicros.CompositeType retVal = this.EndGetDataUsingDataContract(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataUsingDataContractCompleted(object state) {
            if ((this.GetDataUsingDataContractCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataUsingDataContractCompleted(this, new GetDataUsingDataContractCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataUsingDataContractAsync(ServiceTramasMicros.Model.WSLogMicros.CompositeType composite) {
            this.GetDataUsingDataContractAsync(composite, null);
        }
        
        public void GetDataUsingDataContractAsync(ServiceTramasMicros.Model.WSLogMicros.CompositeType composite, object userState) {
            if ((this.onBeginGetDataUsingDataContractDelegate == null)) {
                this.onBeginGetDataUsingDataContractDelegate = new BeginOperationDelegate(this.OnBeginGetDataUsingDataContract);
            }
            if ((this.onEndGetDataUsingDataContractDelegate == null)) {
                this.onEndGetDataUsingDataContractDelegate = new EndOperationDelegate(this.OnEndGetDataUsingDataContract);
            }
            if ((this.onGetDataUsingDataContractCompletedDelegate == null)) {
                this.onGetDataUsingDataContractCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataUsingDataContractCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataUsingDataContractDelegate, new object[] {
                        composite}, this.onEndGetDataUsingDataContractDelegate, this.onGetDataUsingDataContractCompletedDelegate, userState);
        }
    }
}
